name: Backend CI

on: [push, pull_request]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs.server }}
      alpr: ${{ steps.filter.outputs.alpr }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          server:
            - 'server/**'
          alpr:
            - 'wegliML/**'

  build-alpr:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: wegliML
    needs: [changes]
    if:
      needs.changes.outputs.alpr == 'true'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache dependencies
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
    - name: Test with pytest
      run: pytest --disable-pytest-warnings --cov=. tests alpr_gcloud_vision/tests/test_main.py alpr_gcloud_vision/tests/license_plate_candidate_test.py

  
  deploy-alpr:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: wegliML
    needs: [build-alpr, changes]
    if: 
      github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && needs.build-alpr.result == 'success' && needs.changes.outputs.alpr == 'true'
    steps:
    - name: Login to GCP
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Copy model data for ALPR
      run: gsutil -m cp -r gs://${{ secrets.SERVICE_BUCKET_NAME }}/checkpoints ./alpr_yolo_cnn
    - name: Submit new container build
      run: gcloud builds submit --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/image-analysis
    - name: Deploy to GCP
      run: gcloud run deploy image-analysis --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/image-analysis --allow-unauthenticated --region=europe-west3 --platform managed


  build-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    needs: [changes]
    if:
      needs.changes.outputs.server == 'true'
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Install dependencies
      run: npm install
    - name: Lint code
      run: npm run lint
    - run: npm run build --if-present
    - name: Test code
      run: npm test
      env:
        CI: true

  
  deploy-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    needs: [build-server, changes]
    if: 
      github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && needs.build-server.result == 'success' && needs.changes.outputs.server == 'true'
    steps:
    - name: Login to GCP
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true
    - uses: actions/checkout@v2
    - name: Deploy to GCP
      run: gcloud functions deploy api --allow-unauthenticated --trigger-http --runtime=nodejs12 --region=europe-west3 --memory=1G --set-env-vars=DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},DB_SOCKET_PATH=${{ secrets.DB_SOCKET_PATH }},IMAGE_ANALYSIS_ENDPOINT=${{ secrets.IMAGE_ANALYSIS_ENDPOINT }}
